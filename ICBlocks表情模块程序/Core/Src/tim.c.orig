/**
  ******************************************************************************
  * @file    tim.c
  * @brief   This file provides code for the configuration
  *          of the TIM instances.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "tim.h"

/* USER CODE BEGIN 0 */
#include "oled.h"
#include "Switch_emoji.h"

uint32_t capture_Buf[3] = {0};   //存放计数值
uint8_t capture_Cnt = 0;    //状态标志位
uint32_t high_time;   //高电平时间
uint8_t TEST;
uint16_t pwm_time_up;
uint16_t time1_up;
uint8_t ceshi=0;
/* USER CODE END 0 */

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
    htim1.Init.Prescaler = 71;
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim1.Init.Period = 9999;
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim1.Init.RepetitionCounter = 0;
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
    {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
    {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */

}
/* TIM2 init function */
void MX_TIM2_Init(void)
{

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
    TIM_IC_InitTypeDef sConfigIC = {0};

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
    htim2.Init.Prescaler = 71;
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim2.Init.Period = 65535;
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
    if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
    {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
    {
        Error_Handler();
    }
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
    sConfigIC.ICFilter = 0;
    if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */

}
/* TIM3 init function */
void MX_TIM3_Init(void)
{

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
    htim3.Init.Prescaler = 71;
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim3.Init.Period = 999;
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
    {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
    {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */

}
/* TIM4 init function */
void MX_TIM4_Init(void)
{

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
    htim4.Init.Prescaler = 71;
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim4.Init.Period = 9999;
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
    {
        Error_Handler();
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
    {
        Error_Handler();
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
    {
        Error_Handler();
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

    if(tim_baseHandle->Instance==TIM1)
    {
        /* USER CODE BEGIN TIM1_MspInit 0 */

        /* USER CODE END TIM1_MspInit 0 */
        /* TIM1 clock enable */
        __HAL_RCC_TIM1_CLK_ENABLE();

        /* TIM1 interrupt Init */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 1);
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
        /* USER CODE BEGIN TIM1_MspInit 1 */

        /* USER CODE END TIM1_MspInit 1 */
    }
    else if(tim_baseHandle->Instance==TIM3)
    {
        /* USER CODE BEGIN TIM3_MspInit 0 */

        /* USER CODE END TIM3_MspInit 0 */
        /* TIM3 clock enable */
        __HAL_RCC_TIM3_CLK_ENABLE();

        /* TIM3 interrupt Init */
        HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
        /* USER CODE BEGIN TIM3_MspInit 1 */

        /* USER CODE END TIM3_MspInit 1 */
    }
    else if(tim_baseHandle->Instance==TIM4)
    {
        /* USER CODE BEGIN TIM4_MspInit 0 */

        /* USER CODE END TIM4_MspInit 0 */
        /* TIM4 clock enable */
        __HAL_RCC_TIM4_CLK_ENABLE();

        /* TIM4 interrupt Init */
        HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
        /* USER CODE BEGIN TIM4_MspInit 1 */

        /* USER CODE END TIM4_MspInit 1 */
    }
}

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};
    if(tim_icHandle->Instance==TIM2)
    {
        /* USER CODE BEGIN TIM2_MspInit 0 */

        /* USER CODE END TIM2_MspInit 0 */
        /* TIM2 clock enable */
        __HAL_RCC_TIM2_CLK_ENABLE();

        __HAL_RCC_GPIOA_CLK_ENABLE();
        /**TIM2 GPIO Configuration
        PA0-WKUP     ------> TIM2_CH1
        */
        GPIO_InitStruct.Pin = GPIO_PIN_0;
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
        GPIO_InitStruct.Pull = GPIO_PULLDOWN;
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

        /* TIM2 interrupt Init */
        HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
        /* USER CODE BEGIN TIM2_MspInit 1 */

        /* USER CODE END TIM2_MspInit 1 */
    }
}

void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* tim_baseHandle)
{
    if(tim_baseHandle->Instance==TIM1)
    {
        /* USER CODE BEGIN TIM1_MspDeInit 0 */

        /* USER CODE END TIM1_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_TIM1_CLK_DISABLE();

        /* TIM1 interrupt Deinit */
        HAL_NVIC_DisableIRQ(TIM1_UP_IRQn);
        /* USER CODE BEGIN TIM1_MspDeInit 1 */

        /* USER CODE END TIM1_MspDeInit 1 */
    }
    else if(tim_baseHandle->Instance==TIM3)
    {
        /* USER CODE BEGIN TIM3_MspDeInit 0 */

        /* USER CODE END TIM3_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_TIM3_CLK_DISABLE();

        /* TIM3 interrupt Deinit */
        HAL_NVIC_DisableIRQ(TIM3_IRQn);
        /* USER CODE BEGIN TIM3_MspDeInit 1 */

        /* USER CODE END TIM3_MspDeInit 1 */
    }
    else if(tim_baseHandle->Instance==TIM4)
    {
        /* USER CODE BEGIN TIM4_MspDeInit 0 */

        /* USER CODE END TIM4_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_TIM4_CLK_DISABLE();

        /* TIM4 interrupt Deinit */
        HAL_NVIC_DisableIRQ(TIM4_IRQn);
        /* USER CODE BEGIN TIM4_MspDeInit 1 */

        /* USER CODE END TIM4_MspDeInit 1 */
    }
}

void HAL_TIM_IC_MspDeInit(TIM_HandleTypeDef* tim_icHandle)
{

    if(tim_icHandle->Instance==TIM2)
    {
        /* USER CODE BEGIN TIM2_MspDeInit 0 */

        /* USER CODE END TIM2_MspDeInit 0 */
        /* Peripheral clock disable */
        __HAL_RCC_TIM2_CLK_DISABLE();

        /**TIM2 GPIO Configuration
        PA0-WKUP     ------> TIM2_CH1
        */
        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);

        /* TIM2 interrupt Deinit */
        HAL_NVIC_DisableIRQ(TIM2_IRQn);
        /* USER CODE BEGIN TIM2_MspDeInit 1 */

        /* USER CODE END TIM2_MspDeInit 1 */
    }
}

/* USER CODE BEGIN 1 */


void  pwm_input()
{
    switch (capture_Cnt)
    {
    case 0:
        capture_Cnt++;
        __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
        HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);	//启动输入捕获
        break;
    }
}
void pwm_input_emoji()
{

    if((HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)&&KEY_DOWN1==0)//高电平
    {
        HAL_TIM_Base_Start_IT(&htim4);//开启计数器
    }
    else//低电平的时候==0
    {
        pwm_time_up=0;
    }
    if(pwm_time_up>10)
    {
        HAL_TIM_Base_Stop_IT(&htim4);
        KEY_DOWN1=1;
        pwm_time_up=0;
    }

    switch (high_time)  //20是回到刚才的表情 暂时用不到
    {
    case 60:     //遥控器程序执行完
        HAL_TIM_Base_Start_IT(&htim1);

        break;
    case 10:     //10是默认表情  35-伤心 30-生气  45-开心  55-哭泣  25-微笑

        emoji_num=0;
        KEY_DOWN1=0;
        break ;
    /*喜  */
    case 25:
        emoji_num=1;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
        break ;
    /*怒 生气*/
    case 30:
        emoji_num=2;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
        break ;
    case 31:
        emoji_num=2;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
        break ;
    /*哀 伤心 */
    case 35:
        emoji_num=3;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
        break ;
    case 36:
        emoji_num=3;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
        break ;
    /*乐  开心*/
    case 45:
        emoji_num=4;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
    case 46:
        emoji_num=4;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
        break ;
    /*泣 哭泣*/
    case 55:
        emoji_num=5;
        KEY_DOWN1=0;
        time1_up=0;
//        HAL_TIM_Base_Start_IT(&htim1);
        break ;
    /*******表情加减******/
    case 85:
        if(KEY_DOWN1==1)
        {
            HAL_Delay(260);   //延时1S
            emoji_num++;
            if(emoji_num>5)
            {
                emoji_num=0;
            }
            KEY_DOWN1=0;
            high_time=0;
        }
        break ;
    case 95:   //表情减
        if(KEY_DOWN1==1)
        {
            HAL_Delay(260);   //延时1S
            emoji_num--;
            if(emoji_num<0)
            {
                emoji_num=5;
            }
            KEY_DOWN1=0;
            high_time=0;
        }
        break ;
    case 100:   //测试
        HAL_Delay(260);   //
        OLED_CLS();
        ////////////////////////测试
        KEY_DOWN1=0;
        time1_up=0;
        ceshi=1;
		OLED_CLS();
		while(1)
        {
            OLED_ShowCN(30, 3, 0);
            OLED_ShowCN(50, 3, 1);
            OLED_ShowCN(70, 3, 2);
            OLED_ShowCN(90, 3, 3);
					 HAL_Delay(1000);   //
        }
        break ;
    default:
        break ;
    }
    high_time=0;
}

void pwm_input_num()
{
    if((HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==1)&&KEY_DOWN1==0)//高电平
    {
        HAL_TIM_Base_Start_IT(&htim4);//开启计数器
    }
    else//低电平的时候==0
    {
        pwm_time_up=0;
    }
    if(pwm_time_up>10)
    {
        HAL_TIM_Base_Stop_IT(&htim4);
        KEY_DOWN1=1;
        pwm_time_up=0;
    }
    if(KEY_DOWN1==1)
    {
        switch(high_time)  //20是回到刚才的表情 暂时用不到
        {
        case 85:     // 数字加
            HAL_Delay(200);   //延时1S
            if(high_time==85)
            {
                num_data++;
                if(num_data==100)
                {
                    OLED_CLS();
                }
                if(num_data>99)
                {
                    num_data=0;
                }
            }
            KEY_DOWN1=0;
            KEY_DOWN1=0;
            high_time=0;
            break ;
        case 95:    //数字减
            HAL_Delay(200);   //延时1S
            if(high_time==95)
            {
                num_data--;
                if(num_data<0)
                {
                    num_data=99;
                }
                if(num_data==9)
                {
                    OLED_CLS();
                }
            }
            KEY_DOWN1=0;
            KEY_DOWN1=0;
            high_time=0;
            break ;
             case 100:   //测试
						HAL_Delay(260);   //
            OLED_CLS();
            ////////////////////////测试
            KEY_DOWN1=0;
            time1_up=0;
            ceshi=1; 
						 OLED_CLS();
							while(1)
        {
           
            OLED_ShowCN(30, 3, 0);
            OLED_ShowCN(50, 3, 1);
            OLED_ShowCN(70, 3, 2);
            OLED_ShowCN(90, 3, 3);
					 HAL_Delay(1000);   //
        }
            break ;
        default:
            break ;
        }
			
        high_time=0;
    }
}

/*****************输入捕获回调函数*******************************/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
    if(TIM2 == htim->Instance)
    {
        switch(capture_Cnt)
        {
        case 1:
            pwm_time_up=0;
            capture_Buf[0] = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);//获取当前的捕获值.
            __HAL_TIM_SET_CAPTUREPOLARITY(&htim2,TIM_CHANNEL_1,TIM_ICPOLARITY_FALLING);  //设置为下降沿捕获
            capture_Cnt++;
            break;
        case 2:
            capture_Buf[1] = HAL_TIM_ReadCapturedValue(&htim2,TIM_CHANNEL_1);//获取当前的捕获值.
            HAL_TIM_IC_Stop_IT(&htim2,TIM_CHANNEL_1); //停止捕获   或者: __HAL_TIM_DISABLE(&htim5);
            capture_Cnt++;
            pwm_time_up=0;
            high_time = capture_Buf[1]- capture_Buf[0];    //高电平时间
            capture_Cnt = 0;  //清空标志位
            break;
        }

    }

}

/* USER CODE END 1 */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
